coverdiv()
  position absolute
  top 0
  left 0
  width 100%
  height 100%

ibg()
  background-position center
  background-size cover
  background-repeat no-repeat
  position relative

ibg_img()
  width 0
  height 0
  position absolute
  top 0
  left 0
  opacity 0
  visibility hidden

font(name, fileName, ext = 'ttf', weight = 600)
  @font-face
    font-family name
    font-weight weight
    src url('../../assets/fonts/' + fileName + '.' + ext)

coverbg(image = none)
  background-repeat no-repeat
  background-size cover
  -o-background-size cover
  -moz-background-size cover
  -webkit-background-size cover
  background-position center

  if (image != none)
    background-image url('../../assets/' + image)

line(w, h, color)
  &:after
    content ''
    display block
    width w
    height h
    background-color color

// vertical-align at center
vcenter()
  position absolute
  top 50%
  left 50%
  transform translate(-50%, -50%)

center(axis = both)
  if axis both
    vcenter()
  else if (axis == x)
    position absolute
    left 50%
    transform translateX(-50%)
  else if (axis == y)
    position absolute
    top 50%
    transform translateY(-50%)

// simple gradient
g(color1, color2)
  background linear-gradient(color1, color2)

tr(when = .25s, what = all, how = ease)
  -webkit-transition what when how
  -moz-transition what when how
  -ms-transition what when how
  -o-transition what when how
  transition what when how

css-triangle(triangle-size, triangle-color, triangle-direction = right)
  content ''
  display block
  width 0
  height 0
  border inset triangle-size

  if (triangle-direction == top)
    border-color transparent transparent triangle-color transparent
    border-bottom-style solid

  if (triangle-direction == right)
    border-color transparent transparent transparent triangle-color
    border-left-style solid

  if (triangle-direction == bottom)
    border-color triangle-color transparent transparent transparent
    border-top-style solid

  if (triangle-direction == left)
    border-color transparent triangle-color transparent transparent
    border-right-style solid

em(size, context = 16)
  return (size / context) * 1em

rem(size, context = 16)
  return (size / context) * 1rem

vw(size, context = 1920)
  return (size / context * 100) * 1vw

vh(size, context = 1920)
  return (size / context * 100) * 1vh

size(a, b = false)
  width a

  if (b)
    height b
  else
    height a

justify()
  text-align justify
  line-height 0
  font-size 0
  text-align-last justify

  &:after
    content ''
    display inline-block
    width 100%
    height 0px
    visibility hidden
    overflow hidden

vertical()
  text-align center
  font-size 0

  &:before
    content ''
    display inline-block
    vertical-align middle
    width 0
    height 100%

clr()
  &:after
    content ' '
    display block
    height 0
    visibility hidden
    clear both

gpu()
  transform translate3d(0, 0, 0)

bg_size(width = 100%, height = 100%)
  background-size width height

// simple gradient
g(color1, color2)
  background-image linear-gradient(color1, color2)

gh(color1, color2)
  background-image linear-gradient(left, color1, color2)

// SCROLLBARS
scrollbar()
  &::-webkit-scrollbar
    {block}

scrollbar-track()
  &::-webkit-scrollbar-track
    {block}

scrollbar-thumb()
  &::-webkit-scrollbar-thumb
    {block}

scrollbar-track-piece()
  &::-webkit-scrollbar-track-piece
    {block}

placeholder-color(color)
  &::placeholder
    color color

placeholder()
  &::placeholder
    {block}

// Media query
// width
w(width)
  @media only screen and (max-width width * 1px)
    {block}

wmin(width)
  @media only screen and (min-width width * 1px)
    {block}

// height
h(height)
  @media only screen and (max-height height * 1px)
    {block}

hmin(height)
  @media only screen and (min-height height * 1px)
    {block}

md()
  +r(1023)
    {block}

sm()
  +r(767)
    {block}

xs()
  +r(599)
    {block}

text-overflow()
  overflow hidden
  text-overflow ellipsis
  white-space nowrap

// retina, also available as +hdpi
retina()
  @media only screen and (-webkit-min-device-pixel-ratio 2), only screen and (min-device-pixel-ratio 2)
    {block}

nouserselect()
  user-select none

prevent-text()
  word-break break-all
  word-break break-word
  hyphens auto

font-smoothing(val = antialiased)
  font-smoothing val

sel()
  &::selection
    {block}
